当前的实现认为，只有两个握手的节点都有 local_primary，那么就认为产生了
脑裂。

version: 9f77fd7, date: 2015.1.5
version: 9f77fd7, date: 2015.1.6
version: 9f77fd7, date: 2015.1.8

对于单节点的情况：

1. P0 写入数据，SRL 没满
   P0 reboot

   Correct: SRL 仍然有数据，且和重启前一样

   2014.11.25: OK
   2015.1.5(9f77fd7): OK

2. P0 写入数据，导致产生 BM
   等待 BM 完成
   P0 reboot

   Correct: BM 的数据和重启前一样

   2014.11.25: OK
   2015.1.5(9f77fd7): OK

3. P0 写入数据，数据应大于 SRL 容量的 2 倍

   Correct: 能够正确地产生 BM

   2014.11.25: OK
   2015.1.5(9f77fd7): OK

4. P0 创建文件系统
   mount /dev/hadm0 /mnt
   dd if=/dev/urandom of=/mnt/10 bs=10 count=1
   md5sum /mnt/10 > /mnt/md5
   umount /mnt
   mount /dev/hadm0 /mnt
   md5sum -c /mnt/md5

   Correct: md5 的结果正确

   2014.11.25: OK
   2015.1.5(9f77fd7): OK

5. P0 创建文件系统
   挂载文件系统
   写入数据使之大于 SRL 容量的 2 倍

   Correct: 能够正确地产生 BM

   2014.11.25: FAIL，没有产生 BM
   2014.12.03(e55b398): OK
   2015.1.5(9f77fd7): OK

6. P0 创建文件系统
   挂载文件系统
   持续地写入和删除小文件

   Correct: 能够正确地产生 BM

   2014.11.25: FAIL，不能正确产生 BM，SRL 的数值不断改变
   2014.12.03(e55b398): OK
   2015.1.5(9f77fd7): OK



对于两个节点的情况：

1. init: S0, S1
   (S0) (S1)
   (P0) (S1)
   (P0, S1)

   Correct: P0 能够发现 S1 需要 fullsync

   2014.11.26: OK
   2015.1.5(9f77fd7): OK

2. (P0, S1)
   P0 写入数据传输到 S1 ==> C_SYNC | DATA_CONSISTENT
   等待传输完成 ==> C_SYNC | DATA_CONSISTENT

   Correct: C_SYNC | DATA_CONSISTENT

   2014.11.26: OK
   2015.1.5(9f77fd7): OK

3. (P0, S1)
   (P0) (S1) ==> N_DISCONNECT
   P0 写入数据使之对 S1 产生 BM

   Correct: N_DISCONNECT | C_STOPPED | DATA_INCONSISTENT

   2014.11.26: OK
   2015.1.5(9f77fd7): OK

4. (P0) (S1) ==> P0 对 S1 产生了 BM，S1 最后接收的数据是 P0 发送的
   P0 <==handshake== S1

   Correct: 状态的转换顺序如下：

       1. C_BITMAP | DATA_INCONSISTENT
       2. C_RESYNC_BM | DATA_INCONSISTENT
       3. C_RESYNC_SRL | DATA_CONSISTENT
       4. C_RESYNC | DATA_CONSISTENT

   2014.11.26: FAIL，握手成功之后连接状态是 N_DISCONNECT，继续运行状态就正确了
   2014.12.01: OK
   2015.1.5(9f77fd7): OK

5. (P0, S1)
   (P0) (S1) ==> N_DISCONNECT
   (P0) (P1)
   P0 写入数据，P1 写入数据
   建立 P0 到 P1 的连接 ==> 能够发现对方是主节点

   Correct: P0 和 P1 都能够发现对方是主节点(C_STOPPED | DATA_SPLITBRAIN)

   2014.11.26: OK
   2015.1.5(9f77fd7): OK

6. (P0) (P1) ==> 脑裂
   (S0) (P1)
   S0 ==handshake==> P1
   S0 <==fbsync== P1

   Correct:

       1. 握手失败
       2. 在 S0 中查询状态，只能看到本地节点
       3. 在 P1 中查询状态，看到 S0 的状态是： C_STOPPED | DATA_SPLITBRAIN
       4. S0 接受了 P1 为主节点，P1 看到 S0 的状态是： C_SYNC | DATA_CONSISTENT

   2014.11.26: OK
   2015.1.5(9f77fd7): OK

7. (S0, P1)
   S0 <==fullsync== P1

   Correct: S0 接收 P1 的 fullsync

   2014.11.26: OK（如果 S0 接收了 P1 为主节点，并且传输状态是 C_SYNC，是否允许
   fullsync？）
   2014.1.5(9f77fd7): OK

8. P0 ==fullsync==> S1
   fullsync 没有完成之前，断开连接

   Correct:

       1. P0 看到 S1 的状态：N_DISCONNECT | C_STOPPED | DATA_INCONSISTENT
       2. S1 查询状态只能看到本地的状态，last_primary 设置为 P0，但 srl_seq 为 0

   2014.11.26: FAIL，连接断开后传输状态没有改变，仍然是 C_RESYNC_BM
   2014.12.03(e55b398): OK
   2014.1.5(9f77fd7): FAIL
       1. P0 看到 S1 的状态： N_DISCONNECT | C_STOPPED | DATA_CONSISTENT
       2. S1 查询状态时只能看到本地的状态，last_primary 设置为 P0，但是 srl_seq 不为 0

9. S0, S1
   S0 init
   S1 init
   S0 ==> P0
   P0 ==fullsync==> S1
   P0 reboot
   P0 <== S1

   handshake: (P0, S1)

   2014.11.25: FAIL
   2014.11.26: FAIL，在传输状态变为 C_SYNC 之后，连接状态仍然是 N_DISCONNECT，但
               之后就正常了
   2014.12.03(e55b398): OK
   2015.1.6(9f77fd7): OK

10. (P0, S1)
   (P0 ==data==> S1)
   数据还没有同步完，连接断开 ==> C_STOPPED
   连接恢复 ==> C_SYNC | DATA_CONSISTENT

   Correct: 握手成功，数据自动传输

   2014.11.26: OK
   2015.1.6(9f77fd7): FAIL
       1. 在 console 中出现空指针错误
       [  548.389051] BUG: unable to handle kernel NULL pointer dereference at 0000000000000008
       [  548.390455] IP: [<ffffffff81536f52>] sk_stream_wait_memory+0xd2/0x270
       [  548.391707] PGD 0
       2. 状态显示中"SRL Behind"一行的数值是 0




对于三个节点的情况：

1. (P1 S2 S3)
   三个节点数据处于 UPTODATE 状态
   断开 S3 的连接 ==> (P1 S2) P3
   S3 变为 P3
   P3 写入数据
   恢复 P3 的连接

   handshake:能够发现 (P1 S2) P3 分裂为两个域

   2014.11.27: OK
       在两个主节点连接之后，能够设置对方的状态是 DATA_SPLITBRAIN。但是，在 P1
       和 P3 中，显示 S2 的状态都是连接的，不能确定 S2 究竟接受了谁作为它的主节
       点。
   2015.1.6(9f77fd7): OK

2. (P1 S2 S3) 三个节点数据处于 UPTODATE 状态
   断开 P1 的网络连接
   (P1) S2 S3
   (P1) (P2 S3)

   Correct: P2 和 S3 能够握手成功

   2014.11.27: FAIL，P2 和 S3 发生脑裂
   2014.12.03(e55b398): OK
   2015.1.8(9f77fd7): OK

   P2 写入数据，等待数据同步到 S3
   P1 恢复网络连接

   Correct: P1 和 P2 都能发现对方脑裂

   2014.12.03(e55b398): OK
   2015.1.8(9f77fd7): OK

   P2 断开网络

   Correct: P1 能够发现 S3 需要 fullsync

   2014.12.03(e55b398): OK
   2015.1.8(9f77fd7): OK

3. S1 S2 S3 三个节点的数据处于 UPTODATE 的状态
   (P1) (P2) (S3) 三个节点的网络都处于断开的状态
   P1 和 P2 分别写入数据
   打开 P1 P2 S3 的网络连接

   handshake: S3 只会接受一个主节点，P1 和 P2 能够发现对方脑裂

   2014.11.27: OK
       P1 和 P2 能够发现对方是主节点，但是单纯通过查看 P1 和 P2 的状态，不能断定
       S3 接受了谁为主节点
   2015.1.8(9f77fd7): OK

4. S0 S1 S2
   init S0
   init S1
   (P0) S1
   P0 ==fullsync==> S1
   (P0, S1) ==> P0 对 S1 的 BM 变为 0，status 和 dump 的结果一致

   2014.11.24: FAIL，status 显示 BM 为 0，而 dump 显示的状态不为 0
   2014.11.28: OK
   2015.1.8(9f77fd7): OK

5. S1 init, S2 init, S3 init
   (P1) (P2) (P3)
   打开 P1 P2 和 P3 的网络连接

   Correct: P1 P2 P3 都能够发现对方是主节点

   2014.11.28: OK
   2015.1.8(9f77fd7): OK

6. 完成了第 5 个用例之后
   (P1) (P2) (P3)
   (P1) (P2, S3) 或者 (P1 S3) (P2)

   Correct: 在 P1 或者 P2 能够看到 S3 是 C_STOPPED | DATA_CORRUPT

   2014.11.28: FAIL，在 P1 或者 P2 看到 S3 的传输状态是 C_SYNC
   2014.12.03(e55b398): FAIL
           在 P1 看到 S3 的数据状态是 DATA_SPLITBRAIN，不能指示需要对 S3 进行
           fullsync 的操作，同时传输状态是 C_STOPPED，这个是正确的
   2015.1.8(9f77fd7): OK



基本的测试用例：

1. dd zero

2. (P0, S1) 正常同步数据
   改变 S1 的 uuid

   handshake: 握手失败

3. (P0, S1)
   P0 reboot
   S1 reboot
   S1 ==> P0

   handshake: 握手成功，(P0, S1)

   2014.11.24: OK
   2015.1.6(9f77fd7): OK

4. (P0, S1, S2)
   断开连接
   (P0), (S1, S2)
   (P0), (P1, S2)

   handshake: P1 和 S2 能够握手成功

   2014.11.24: OK

5. (P0, S1)
   断开连接
   (P0) (P1)
   P0 P1 分别写入数据
   (S0) (P1)
   恢复连接

   handshake: 能够发现需要 fbsync

   2014.11.18: OK
   2014.1.6(9f77fd7): OK
       备注：在 P1 执行 fbsync 之后，出现了 oops
       [  845.329904] BUG: unable to handle kernel NULL pointer dereference at           (null)
       [  845.331677] IP: [<ffffffff8104c18a>] __wake_up_common+0x2a/0x90
       [  845.333064] PGD 7b705067 PUD 7a2a0067 PMD 0        
       [  845.333885] Oops: 0000 [#1] SMP 
       [  845.333885] CPU 0 
       [  845.333885] Modules linked in: hadm_kmod(O) psmouse serio_raw mac_hid virtio_balloon i2c_piix4 lp parport floppy
       [  845.333885] 
       [  845.333885] Pid: 5283, comm: sh Tainted: G           O 3.2.0-23-generic #36-Ubuntu Bochs Bochs
       [  845.333885] RIP: 0010:[<ffffffff8104c18a>]  [<ffffffff8104c18a>] __wake_up_common+0x2a/0x90
       [  845.333885] RSP: 0018:ffff880036de9c68  EFLAGS: 00010092
       [  845.333885] RAX: 0000000000000082 RBX: ffff88007b7fca10 RCX: 0000000000000000
       [  845.333885] RDX: 0000000000000000 RSI: 0000000000000003 RDI: ffff88007b7fca10
       [  845.333885] RBP: ffff880036de9ca8 R08: 0000000000004010 R09: ffff880078b63ce8
       [  845.333885] R10: ffff880078b63cc8 R11: ffff880078b63cd8 R12: 0000000000000082
       [  845.333885] R13: ffff88007b7fca18 R14: 0000000000004010 R15: 0000000000000000
       [  845.333885] FS:  00007ff49dc4b700(0000) GS:ffff88007fc00000(0000) knlGS:0000000000000000
       [  845.333885] CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b
       [  845.333885] CR2: 0000000000000000 CR3: 000000003698a000 CR4: 00000000000006f0
       [  845.333885] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
       [  845.333885] DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400
       [  845.333885] Process sh (pid: 5283, threadinfo ffff880036de8000, task ffff88007b7716f0)
       [  845.333885] Stack:
       [  845.333885]  ffff880036de9cf0 0000000300000001 ffff880036de9c88 ffff88007b7fca10
       [  845.333885]  0000000000000082 0000000000000003 0000000000000001 0000000000004010
       [  845.333885]  ffff880036de9ce8 ffffffff8104dd68 0000000000000001 ffff88007b7fc200
       [  845.333885] Call Trace:
       [  845.333885]  [<ffffffff8104dd68>] __wake_up+0x48/0x70
       [  845.333885]  [<ffffffff811bd049>] signalfd_cleanup+0x39/0x40
       [  845.333885]  [<ffffffff81065350>] __cleanup_sighand+0x20/0x40
       [  845.333885]  [<ffffffff81069c93>] __exit_signal+0x203/0x340
       [  845.333885]  [<ffffffff8106a45f>] release_task+0x7f/0x130
       [  845.333885]  [<ffffffff8106a9ae>] wait_task_zombie+0x49e/0x5f0
       [  845.333885]  [<ffffffff8106ac03>] wait_consider_task.part.9+0x103/0x170
       [  845.333885]  [<ffffffff8106acd5>] wait_consider_task+0x65/0x70
       [  845.333885]  [<ffffffff8106ade1>] do_wait+0x101/0x260
       [  845.333885       ]  [<ffffffff810663fb>] ? do_fork+0x15b/0x2e0
       [  845.333885]  [<ffffffff8106c150>] sys_wait4+0xa0/0xf0
       [  845.333885]  [<ffffffff81069930>] ? wait_task_continued+0x170/0x170
       [  845.333885]  [<ffffffff81664a82>] system_call_fastpath+0x16/0x1b
       [  845.333885] Code: 00 55 48 89 e5 41 57 41 56 41 55 41 54 53 48 83 ec 18 66 66 66 66 90 89 55 c8 48 8b 57 08 4c 8d 6f 08 89 75 cc 41 89 cf 4d 89 c6 <48> 8b 1a 48 8d 42 e8 48 83 eb 18 49 39 d5 75 0c eb 3d 0f 1f 4
0 


6. (P0, S1)
   断开连接 (P0) (S1)
   S1 init
   P0 ==> S0, (S0) (S1)
   (S0) (P1)
   恢复连接

   hanshake: 能够发现需要 fullsync

   2014.11.18 OK
   2015.1.6(9f77fd7): FAIL
       备注：在 S1 init 之前，执行 rmmod 时内核发生 oops:
       [  243.343709] BUG: unable to handle kernel NULL pointer dereference at 0000000000000008
       [  243.345501] IP: [<ffffffff8105e126>] set_task_cpu+0x226/0x2c0
       [  243.346819] PGD 7a38b067 PUD 7b919067 PMD 0 
       [  243.347264] Oops: 0000 [#1] SMP 
       [  243.347264] CPU 1 
       [  243.347264] Modules linked in: hadm_kmod(O) psmouse virtio_balloon serio_raw i2c_piix4 mac_hid lp parport floppy
       [  243.347264] 
       [  243.347264] Pid: 1009, comm: bash Tainted: G           O 3.2.0-23-generic #36-Ubuntu Bochs Bochs
       [  243.347264] RIP: 0010:[<ffffffff8105e126>]  [<ffffffff8105e126>] set_task_cpu+0x226/0x2c0
       [  243.347264] RSP: 0018:ffff88007b6efcd0  EFLAGS: 00010046
       [  243.347264] RAX: 0000000000000000 RBX: ffff880078e444d0 RCX: ffffffff81e0de00
       [  243.347264] RDX: ffffffff81e794a0 RSI: 0000000000000001 RDI: ffff880078e444d0
       [  243.347264] RBP: ffff88007b6efdb0 R08: 0000000000000000 R09: ffff88007b83cbd0
       [  243.347264] R10: 0000000000000000 R11: 0000000000016b70 R12: 0000000000000001
       [  243.347264] R13: 0000000000000001 R14: 0000000000000286 R15: ffff88007b6eff58
       [  243.347264] FS:  00007f570d4c4700(0000) GS:ffff88007fd00000(0000) knlGS:0000000000000000
       [  243.347264] CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b
       [  243.347264] CR2: 0000000000000008 CR3: 000000007aaad000 CR4: 00000000000006e0
       [  243.347264] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
       [  243.347264] DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400
       [  243.347264] Process bash (pid: 1009, threadinfo ffff88007b6ee000, task ffff88007b448000)
       [  243.347264] Stack:
       [  243.347264]  ffff88007b6efce0 ffffffff8103cd49 ffff88007b6efcf0 ffffffff8101ae59
       [  243.347264]  ffff88007b6efd20 ffffffff81090ed5 ffff880036938960 0000000000000001
       [  243.347264]  ffff88007fd14200 ffff88007b6efd40 ffffffff8104f989 0000000000000800
       [  243.347264] Call Trace:
       [  243.347264]  [<ffffffff8103cd49>] ? kvm_clock_read+0x19/0x20
       [  243.347264]  [<ffffffff8101ae59>] ? sched_clock+0x9/0x10
       [  243.347264]  [<ffffffff81090ed5>] ? sched_clock_local+0x25/0x90
       [  243.347264]  [<ffffffff8104f989>] ? sched_slice.isra.92+0x59/0xa0
       [  243.347264]  [<ffffffff810568ec>] ? task_fork_fair+0xdc/0x160
       [  243.347264]  [<ffffffff8105fde5>] sched_fork+0x155/0x2c0
       [  243.347264]  [<ffffffff81065810>] copy_process.part.18+0x4a0/0xe60
       [  243.347264]  [<ffffffff81066247>] copy_process+0x77/0x80
       [  243.347264]  [<ffffffff8106639a>] do_fork+0xfa/0x2e0
       [  243.347264]  [<ffffffff81177c90>] ? vfs_write+0x110/0x180
       [  243.347264]  [<ffffffff8101c658>] sys_clone+0x28/0x30
       [  243.347264]  [<ffffffff81664da3>] stub_clone+0x13/0x20
       [  243.347264]  [<ffffffff81664a82>] ? system_call_fastpath+0x16/0x1b
       [  243.347264] Code: 0f 1f 44 00 00 48 81 7b 40 80 61 80 81 0f 85 70 fe ff ff f6 43 14 04 0f 85 66 fe ff ff 48 8b 83 58 05 00 00 48 8b 80 90 01 00 00 <48> 8b 48 08 e9 4f fe ff ff 90 48 81 7b 40 80 61 80 81 0f 85 6d 
       

7. (P0, S1)
   P0 写入数据，使对 S1 产生 BM
   P0 reboot
   S0 ==> P1

   handshake: 能够握手成功，P1 能够发现和 S0 发生数据冲突

   2014.11.18 OK
   2015.1.6(9f77fd7): OK
       备注：在数据冲突发生之后，运行 fullsync 后，在 S0 节点发生了 oops:
       [  159.252961] srl: reset srl meta & bm:
       [  159.253749] srl: clean bitmap for node:1.
       [  159.255507] BUG: unable to handle kernel paging request at ffff88007a6c0000
       [  159.256410] IP: [<ffffffffa006bcaf>] bitmap_clear_all+0x6f/0x140 [hadm_kmod]
       [  159.257291] PGD 1c06063 PUD 1fffc067 PMD 79aed063 PTE 800000007a6c0161
       [  159.258159] Oops: 0003 [#1] SMP 
       [  159.258600] CPU 0 
       [  159.258843] Modules linked in: hadm_kmod(O) psmouse serio_raw i2c_piix4 virtio_balloon mac_hid lp parport floppy
       [  159.259478] 
       [  159.259478] Pid: 1265, comm: data_worker00 Tainted: G           O 3.2.0-23-generic #36-Ubuntu Bochs Bochs
       [  159.259478] RIP: 0010:[<ffffffffa006bcaf>]  [<ffffffffa006bcaf>] bitmap_clear_all+0x6f/0x140 [hadm_kmod]
       [  159.259478] RSP: 0018:ffff88007a5e9cf0  EFLAGS: 00010202
       [  159.259478] RAX: 0000000000000000 RBX: ffff88007a6bf04c RCX: 0000000000000009
       [  159.259478] RDX: 0000000000000ffc RSI: 0000000000016510 RDI: ffff88007a6c0000
       [  159.259478] RBP: ffff88007a5e9d20 R08: ffffffff81119f37 R09: ffff88007fbf7fe8
       [  159.259478] R10: 0000000000000036 R11: 0000000000000001 R12: 0000000000005000
       [  159.259478] R13: ffff88007a6b0000 R14: 0000000000008000 R15: 0000000000000000
       [  159.259478] FS:  0000000000000000(0000) GS:ffff88007fc00000(0000) knlGS:0000000000000000
       [  159.259478] CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b
       [  159.259478] CR2: ffff88007a6c0000 CR3: 000000007a5f0000 CR4: 00000000000006f0
       [  159.259478] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
       [  159.259478] DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400
       [  159.259478] Process data_worker00 (pid: 1265, threadinfo ffff88007a5e8000, task ffff880078be0000)
       [  159.259478] Stack:
       [  159.259478]  ffff88007a5e9d50 ffff88007b7a4000 ffff88007b7a6000 0000000000000001
       [  159.259478]  0000000000000000 0000000000000001 ffff88007a5e9d50 ffffffffa0069f97
       [  159.259478]  0000000000000000 ffff88007b7a6000 0000000000000003 ffff88007b7a6400
       [  159.259478] Call Trace:
       [  159.259478]  [<ffffffffa0069f97>] srl_reset+0xb7/0xc0 [hadm_kmod]
       [  159.259478]  [<ffffffffa006a1bd>] write_srl_meta+0x21d/0x360 [hadm_kmod]
       [  159.259478]  [<ffffffffa0064b07>] set_last_primary+0x67/0x110 [hadm_kmod]
       [  159.259478]  [<ffffffffa006f87b>] __p_data+0xbb/0x280 [hadm_kmod]
       [  159.259478]  [<ffffffff81161ffb>] ? kfree+0x3b/0x140
       [  159.259478]  [<ffffffffa0071907>] p_worker_run+0x87/0x160 [hadm_kmod]
       [  159.259478]  [<ffffffffa0071c40>] ? p_ctrl_worker_run+0x20/0x20 [hadm_kmod]
       [  159.259478]  [<ffffffffa0071c56>] p_data_worker_run+0x16/0x20 [hadm_kmod]
       [  159.259478]  [<ffffffff8108a42c>] kthread+0x8c/0xa0
       [  159.259478]  [<ffffffff81666bf4>] kernel_thread_helper+0x4/0x10
       [  159.259478]  [<ffffffff8108a3a0>] ? flush_kthread_worker+0xa0/0xa0
       [  159.259478]  [<ffffffff81666bf0>] ? gs_change+0x13/0x13
       [  159.259478] Code: c1 e6 0c eb 76 0f 1f 80 00 00 00 00 40 f6 c7 02 0f 85 8e 00 00 00 40 f6 c7 04 0f 85 9c 00 00 00 89 d1 4c 89 f8 c1 e9 03 f6 c2 04 <f3> 48 ab 74 0a c7 07 00 00 00 00 48 83 c7 04 f6 c2 02 74 09 66 


8. (P0, S1)
   S1 reboot
   P0 对 S1 产生 BM

   handshake: P0 能够发现对 S1 产生 BM，S1 能够握手成功

   2014.11.18 OK 握手成功之后，P0 自动向 S1 同步数据
   2015.1.6(9f77fd7): OK
